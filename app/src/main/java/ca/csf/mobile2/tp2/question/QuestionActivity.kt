package ca.csf.mobile2.tp2.question

import android.annotation.SuppressLint
import android.databinding.Bindable
import android.support.constraint.ConstraintLayout
import android.support.v7.app.AppCompatActivity
import android.view.View
import android.widget.*
import ca.csf.mobile2.tp2.R
import ca.csf.mobile2.tp2.databinding.ActivityQuestionBinding
import ca.csf.mobile2.tp2.util.ErrorType
import org.androidannotations.annotations.*

@SuppressLint("Registered") //Reason : Generated by Android Annotations
@DataBound
@EActivity(R.layout.activity_question)
class QuestionActivity : AppCompatActivity() {

    @Bean
    protected lateinit var questionService: QuestionService

    @InstanceState
    protected lateinit var viewModel: QuestionActivityViewModel

    protected fun onCreate(@BindingObject dataBinder: ActivityQuestionBinding) {
        if (!this::viewModel.isInitialized) {
            viewModel = QuestionActivityViewModel(null)
            fetchRandomQuestion()
        }

        dataBinder.viewModel = viewModel
    }

    @Click(R.id.retry_button, R.id.answers_view)
    protected fun fetchRandomQuestion() {
        viewModel.error = ErrorType.None
        viewModel.shouldShowProgressBar = true

        questionService.getRandomQuestion(
            this::onQuestionFound,
            this::onConnectivityError,
            this::onServerError
        )
        viewModel.hasClickedChoice = false
    }

    @Click(R.id.choice1_button)
    protected fun onChoice1ButtonClick() {
        sendChoice(1)
    }

    @Click(R.id.choice2_button)
    protected fun onChoice2ButtonClick() {
        sendChoice(2)
    }

    private fun sendChoice(choice : Int) {
        questionService.sendResult(
            viewModel.question!!.id, choice,
            this::onQuestionFound,
            this::onConnectivityError,
            this::onServerError
        )

        viewModel.hasClickedChoice = true
    }

    @UiThread
    protected fun onQuestionFound(question: Question) {
        viewModel.question = question
        viewModel.shouldShowProgressBar = false
    }

    @UiThread
    protected fun onConnectivityError() {
        viewModel.error = ErrorType.Connectivity
        viewModel.shouldShowProgressBar = false
    }

    @UiThread
    protected fun onServerError() {
        viewModel.error = ErrorType.Server
        viewModel.shouldShowProgressBar = false
    }
}
